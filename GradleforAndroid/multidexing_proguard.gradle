/*
We've got a hundred classes each with 700 methods. While this is
clearly a contrived example, there's nothing stopping a large project from
getting this big, especially if you've got a lot of big dependencies. Let's
try compiling.

We get the following error:

    trouble writing output: Too many method references: 70936; max is 65536.

Let's unpack what's going on here. The Android virtual machine doesn't
actually run Java byte code, it runs Dalvik byte code, and there's a build
step after Java compilation where the Java byte code is turned into Dalvik
byte code. This step is called Dexing. Part of this process is compiling a
table of every method in the application, which is indexed with two bytes.
That means we're limited to 65k methods.

Fortunately, we can ask Gradle to simply break up this table into multiple
tables simply by setting multiDexEnabled true. That's all there is to it. If
we add that line to defaultConfig and compile again, we're golden.

Just something to be aware of, so you don't get bit in the future.

*/

apply plugin: 'com.android.application'

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.1"

    defaultConfig {
        applicationId "com.udacity.gradle.multidex"
        minSdkVersion 15
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
        // Remove this comment to fix 65k method limit error
        // multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:24.1.1'
}

//PROGUARD
/*

The Android plugin can help reduce the size of your app by stripping out
unused code and resources. It does this with the help of a tool called
Proguard.

Proguard can do a lot of interesting stuff, including obfuscating your code by
giving all your classes and methods meaningless names. That's mostly of
interest if you're really worried about your code being reverse engineered.
For our purposes, however, the properties we want to configure on our build
type are minifyEnabled and shrinkResources.

In this project, we've declared a dependency on Google Play Services, but
we're not actually using any classes from GPS. Proguard is smart enough to
figure that out, and will strip out the unused code from our APK. GPS also
includes many resources like drawables for sign in buttons. Turning on
shrinkResources will trip out any unused resources.

Below we've configured two new build types, one of which has turned on
minificiation and resource shrinking, and one of which has not. Let's check
out the relative sizes of the APKs generated by each build type. Let's run the
`assemble` task to generate both APKs.

Now if we navigate to app/build/outputs/apk, we find that app-big-unsigned.apk
is 2.8 MB, and app-shrunk-unsigned.apk is only 1.2 MB.

There's a lot more you can do to optimize your APK using Proguard. The
following resources are a good place to start.

http://proguard.sourceforge.net/
http://developer.android.com/tools/help/proguard.html
http://tools.android.com/tech-docs/new-build-system/resource-shrinking

*/

apply plugin: 'com.android.application'

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.1"

    defaultConfig {
        applicationId "com.udacity.gradle.proguard"
        minSdkVersion 15
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
        multiDexEnabled = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        shrunk {
            minifyEnabled true
            shrinkResources true
        }
        big {
            minifyEnabled false
            shrinkResources false
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:24.1.1'
    compile 'com.google.android.gms:play-services:9.4.0'
}
