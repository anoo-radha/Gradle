/*

Gradle build scripts are written in Groovy. Groovy is a language that runs on
the JVM that fills a hole for Java developers who need a scripting language.
It's terse, expressive, interoperates extremely well with Java, and has some
special features that make it ideally suited for creating domain specific
languages.

Gradle provides its own
Groovy distribution, so we don't even need to install Groovy to get started.
We can just put our Groovy code in a build.gradle file, and then ask Gradle to
do anything that requires reading the build script.

We'll just declare a task called `groovy` that doesn't do anything. To run
this script, just ask Gradle to run the `groovy` task using

    $ gradle groovy

NOTE: When gradle daemon starts for the first time, it will take some time
but starting a Gradle Daemon for subsequent builds will be faster.
When Android Studio is started, gradle daemon is started and keeps running in the
background. But with command line, the daemon starts for every session and gets
destroyed at the end of every session.
*/

task groovy << {}

println "Hello Groovy!"

/*

Most valid Java is also valid Groovy, and we can interoperate with Java, as
well as access the standard library. Let's make a Java class.

*/

class JavaGreeter {
    public void sayHello() {
        System.out.println("Hello Java!");
    }
}

JavaGreeter greeter = new JavaGreeter()
greeter.sayHello()

/*

Groovy is dynamically typed, which means type checking happens at runtime.
That also means you don't need to declare the types of variables.

*/

def foo = 6.5

/*

Groovy makes is super easy to build up strings using string interpolation.
A variable name prefaced with a dollar sign will have the appropriate value
inserted.

*/

println "foo has value: $foo"

/*

We can also surround any Groovy code with a dollar sign and curly braces.

*/

println "Let's do some math. 5 + 6 = ${5 + 6}"

/*

We can reassign a variable to a different type, and we can also inspect the
type of a variable using `foo.class`.

*/

println "foo is of type: ${foo.class} and has value: $foo"
foo = "a string"
println "foo is now of type: ${foo.class} and has value: $foo"

/*

The `println` keyword is just a shortcut for `System.out.println`, but you've
probably noticed that we're not using any parentheses, and there's not a
semicolon in sight. The latter are always optional, and parentheses can be
omitted whenever a function is called with at least one argument, and the
assignment of arguments to function calls is unambiguous.

These syntactic features are part of what make Groovy such a good choice for a
domain specific language. Let's define a function.

*/

def doubleIt(n) {
    n + n // Note we don't need a return statement
}

/*

Note that we don't need to specify the type of the arguments, nor the return
type. We don't even need to supply a return statement. The last expression in
the block is returned. Let's give it a try.

*/

foo = 5
println "doubleIt($foo) = ${doubleIt(foo)}"

/*

Even more interestingly, since the plus sign is overloaded to concatenate
strings, we can call our function with a string as well.

*/

foo = "foobar"
println "doubleIt($foo) = ${doubleIt(foo)}"

/*

Let's define a few functions to show off one of the coolest syntactic features
of Groovy; you don't need to use parentheses to call a function with at least
one argument.

*/

def noArgs() {
    println "Called the no args function"
}

def oneArg(x) {
    println "Called the 1 arg function with $x"
    x
}

def twoArgs(x, y) {
    println "Called the 2 arg function with $x and $y"
    x + y
}

oneArg 500 // Look, Ma! No parentheses!
twoArgs 200, 300
noArgs()
//noArgs // Doesn't work
//twoArgs oneArg 500, 200 // Also doesn't work as it's ambiguous
twoArgs oneArg(500), 200 // Fixed the ambiguity


/*

Groovy has another way to declare functions called closures. Closures have
two interesting features. First, they are just values that can be assigned to
a variable, just like a number or a string. Second, they can capture variables
from the scope in which they're declared.

*/

task groovy << {}

def foo = "One million dollars"
def myClosure = {
    println "Hello from a closure"
    println "The value of foo is $foo"
}

myClosure()
def bar = myClosure
def baz = bar
baz()

/*

Closures have a different notation for arguments.

*/

def doubleIt = { x -> x + x}

/*

Groovy also allows for higher order functions. That is, functions that take
functions as arguments. Let's make a function that applies another function
twice.

*/

def applyTwice(func, arg){
    func(func(arg))
}

foo = 5
def fooDoubledTwice = applyTwice(doubleIt, foo)
println "Applying doubleIt twice to $foo equals $fooDoubledTwice"

/*

A language where functions are just objects that can be passed around is
said to have "first class functions". The implications of this style of
programming go quite deep and beyond the scope of this course. A search for
"first class function" or "functional programming" will give you more
information.

Groovy allows for very sophisticated list processing using closures. We can
declare a list using a literal.

*/

def myList = ["Gradle", "Groovy", "Android"]

/*

We can execute a closure for each item in the list.

*/

def printItem = {item -> println "List item: $item"}
myList.each(printItem)

/*

We can make this notation much more compact by declaring the closure in-
line, and removing the parentheses. Also, if a closure accepts a single
argument, by default that argument is just called `it`.

*/

myList.each{println "Compactly printing each list item: $it"}

/*

Groovy has a simplified syntax for declaring classes. Note that these classes
are essentially Java classes under the hood. Groovy automatically generates
getters and setters for class properties.

*/

class GroovyGreeter {
    String greeting = "Default greeting"
    def printGreeting(){println "Greeting: $greeting"}
}

def myGroovyGreeter = new GroovyGreeter()

myGroovyGreeter.printGreeting()
myGroovyGreeter.greeting = "My custom greeting"
myGroovyGreeter.printGreeting()

/*
closures can have a delegate
object. Any variables or methods referenced in the closure that don't have a
local definition are then evaluated against the closure's delegate. Let's make
a closure that will access the property and method of our GroovyGreeter class.

*/

def greetingClosure = {
    greeting = "Setting the greeting from a closure"
    printGreeting()
}

// greetingClosure() // This doesn't work, because `greeting` isn't defined in greetingClosure.
                    // First it must be delegated to GroovyGreeter class
greetingClosure.delegate = myGroovyGreeter
greetingClosure() // This works as `greeting` is a property of the delegate

/*
    http://learnxinyminutes.com/docs/groovy/
    http://www.groovy-lang.org/documentation.html
*/
